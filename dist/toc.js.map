{"version":3,"sources":["../src/toc.js"],"names":["path","require","fs","util","marked","Toc","constructor","converter","computeTocParts","getMarkdown","toc","tocMd","getHtml","tocHtml","getItems","tocItems","getTocFileContents","convertedToc","getMarkdownConverter","convertTocMarkdownString","tocFile","getTocFile","readFileSync","encoding","genTocFileContents","Object","keys","getMarkdownFiles","map","filename","basename","format","join","module","exports"],"mappings":"AAAA,aAEA,GAAIA,MAAOC,QAAQ,MAAR,CAAX,CACIC,GAAKD,QAAQ,UAAR,CADT,CAEIE,KAAOF,QAAQ,MAAR,CAFX,CAGIG,OAASH,QAAQ,QAAR,CAHb,CAKA,KAAMI,IAAI,CAER;;;KAIAC,YAAYC,CAAZ,CAAuB,CACrB,KAAKA,SAAL,CAAiBA,CADI,CAErB,KAAKC,eAAL,EACD,CAEDC,aAAc,CACZ,MAAO,MAAKC,GAAL,CAASC,KACjB,CAEDC,SAAU,CACR,MAAO,MAAKF,GAAL,CAASG,OACjB,CAEDC,UAAW,CACT,MAAO,MAAKJ,GAAL,CAASK,QACjB,CAED;;KAGAP,iBAAkB,CAChB,KAAKE,GAAL,CAAW,EADK,CAEhB,KAAKA,GAAL,CAASC,KAAT,CAAiB,KAAKK,kBAAL,EAFD,CAIhB,GAAIC,GAAe,KAAKV,SAAL,CAAeW,oBAAf,GAAsCC,wBAAtC,CAA+D,KAAKT,GAAL,CAASC,KAAxE,CAAnB,CACA,KAAKD,GAAL,CAASG,OAAT,CAAmBI,EAAaJ,OALhB,CAMhB,KAAKH,GAAL,CAASK,QAAT,CAAoBE,EAAaF,QAClC,CAED;;;KAIAC,oBAAqB,CACnB,GAAII,GAAU,KAAKb,SAAL,CAAec,UAAf,EAAd,CADmB,MAEfD,EAFe,CAGVlB,GAAGoB,YAAH,CAAgBF,CAAhB,CAAyB,CAACG,SAAU,MAAX,CAAzB,CAHU,CAMZ,KAAKC,kBAAL,EANY,CAKnB;AAED,CAED;;;KAIAA,oBAAqB,CACnB,MAAOC,QAAOC,IAAP,CAAY,KAAKnB,SAAL,CAAeoB,gBAAf,EAAZ,EAA+CC,GAA/C,CAAmDC,GAAY,CACpE,GAAIC,GAAW9B,KAAK8B,QAAL,CAAcD,CAAd,CAAf,CACA,MAAO1B,MAAK4B,MAAL,CAAY,YAAZ,CAA0BD,CAA1B,CAAoCA,CAApC,CACR,CAHM,EAGJE,IAHI,CAGC,IAHD,CAIR,CAzDO,CA4DVC,OAAOC,OAAP,CAAiB7B,G","file":"toc.js","sourcesContent":["\"use strict\"\n\nvar path = require('path')\n  , fs = require('fs-extra')\n  , util = require('util')\n  , marked = require('marked')\n\nclass Toc {\n\n  /**\n   *\n   * @param {GWC} gwc\n   */\n  constructor(converter) {\n    this.converter = converter\n    this.computeTocParts()\n  }\n\n  getMarkdown() {\n    return this.toc.tocMd\n  }\n\n  getHtml() {\n    return this.toc.tocHtml\n  }\n\n  getItems() {\n    return this.toc.tocItems\n  }\n\n  /**\n   * @private\n   */\n  computeTocParts() {\n    this.toc = {}\n    this.toc.tocMd = this.getTocFileContents()\n\n    let convertedToc = this.converter.getMarkdownConverter().convertTocMarkdownString(this.toc.tocMd)\n    this.toc.tocHtml = convertedToc.tocHtml\n    this.toc.tocItems = convertedToc.tocItems\n  }\n\n  /**\n   * @private\n   * @returns {String}\n   */\n  getTocFileContents() {\n    var tocFile = this.converter.getTocFile()\n    if (tocFile) {\n      return fs.readFileSync(tocFile, {encoding: 'utf8'})\n    }\n    // if no toc file, generate contents from files\n    return this.genTocFileContents()\n  }\n\n  /**\n   * @private\n   * @returns {string}\n   */\n  genTocFileContents() {\n    return Object.keys(this.converter.getMarkdownFiles()).map(filename => {\n      var basename = path.basename(filename)\n      return util.format('- [%s](%s)', basename, basename)\n    }).join('\\n')\n  }\n}\n\nmodule.exports = Toc\n"]}