{"version":3,"sources":["../src/markdown.js"],"names":["marked","require","highlight","fs","path","util","datauri","sync","helpers","Markdown","constructor","wikiPath","aliases","wikiFileAliases","tocItems","firstTocLiClassProcessed","setupMainRenderer","setupTocRenderer","self","mainRenderer","Renderer","code","lang","getLanguage","highlightAuto","value","link","href","title","text","match","isTocLink","getPageIdFromFilenameOrLink","image","format","resolve","tocRenderer","list","body","ordered","tag","listitem","tocLiCounter","regs","substr","length","pageId","push","convertTocMarkdownString","markdown","tocHtml","convertMarkdownString","renderer","replaceGithubWikiLinks","convertMarkdownFile","markdown_file","readFileSync","encoding","item","replace","allPattern","linkTitle","pageName","module","exports"],"mappings":"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","file":"markdown.js","sourcesContent":["\"use strict\"\n\nvar marked = require('marked')\n  , highlight = require('highlight.js')\n  , fs = require('fs')\n  , path = require('path')\n  , util = require('util')\n  , datauri = require('datauri').sync\n  , helpers = require('./helpers')\n\n\nclass Markdown {\n\n  constructor(wikiPath, aliases) {\n    this.wikiPath = wikiPath\n    this.wikiFileAliases = aliases\n    this.tocItems = []\n    this.firstTocLiClassProcessed = false\n    this.setupMainRenderer()\n      .setupTocRenderer()\n  }\n\n  setupMainRenderer() {\n\n    var self = this\n    this.mainRenderer = new marked.Renderer()\n\n    this.mainRenderer.code = function(code, lang) {\n      if (lang && highlight.getLanguage(lang)) {\n        code = highlight.highlight(lang, code, true);\n      } else {\n        code = highlight.highlightAuto(code);\n      }\n      return `<pre class=\"hljs\">${code.value}</pre>`\n    }\n\n    this.mainRenderer.link = function(href, title, text) {\n      if (!href.match(/^https?:\\/\\//) || self.isTocLink(href)) {\n        href = '#' + helpers.getPageIdFromFilenameOrLink(href)\n      }\n      return `<a href=\"${href}\">${text}</a>`\n    }\n\n    this.mainRenderer.image = function(href, title, text) {\n      if (!href.match(/^https?:\\/\\//)) {\n        href = path.resolve(self.wikiPath, href)\n        return util.format('<img src=\"%s\" />', datauri(href))\n      } else {\n        return util.format('<img src=\"%s\" />', href)\n      }\n    }\n    return this\n  }\n\n  setupTocRenderer() {\n\n    var self = this\n    this.tocRenderer = new marked.Renderer()\n\n    this.tocRenderer.list = function(body, ordered) {\n      var tag = ordered ? 'ol' : 'ul'\n      return `<${tag} class=\"nav\">${body}</${tag}>`\n    }\n\n    this.tocRenderer.listitem = function(text) {\n      self.tocLiCounter += 1\n      var regs = text.match(/^([^<]+)/)\n      if (regs) {\n        text = '<span>' + text.substr(0, regs[0].length) + '</span>' + text\n          .substr(regs[0].length)\n      }\n\n      if (!self.firstTocLiClassProcessed && text.substr(0, 2) === '<a') {\n        self.firstTocLiClassProcessed = true\n        return `<li class=\"active\">${text}</li>`\n      }\n\n      return `<li>${text}</li>`\n    }\n\n    this.tocRenderer.link = function(href, title, text) {\n      let pageId = helpers.getPageIdFromFilenameOrLink(href)\n      if(self.wikiFileAliases[pageId]){\n        self.tocItems.push({\n          title: text,\n          link: href,\n          pageId: pageId\n        })\n        href = `#${pageId}`\n      }\n      return `<a href=\"${href}\">${text}</a>`\n    }\n\n    return this\n  }\n\n  convertTocMarkdownString(markdown) {\n    return {\n      tocHtml: this.convertMarkdownString(markdown, this.tocRenderer),\n      tocItems: this.tocItems\n    }\n  }\n\n  convertMarkdownString(markdown, renderer) {\n    renderer = renderer || this.mainRenderer\n    return marked(this.replaceGithubWikiLinks(markdown), {\n      renderer: renderer\n    })\n  }\n\n  convertMarkdownFile(markdown_file) {\n    return this.convertMarkdownString(fs.readFileSync(markdown_file, {\n      encoding: 'utf8'\n    }))\n  }\n\n  /**\n   * @private\n   * @returns {Boolean}\n   */\n  isTocLink(link) {\n    for (let item of this.tocItems) {\n      if (item.link == link) {\n        return true\n      }\n    }\n    return false\n  }\n\n  /**\n   * @private\n   * @returns {String}\n   */\n  replaceGithubWikiLinks(markdown) {\n    // github supports [[...]] declaration of links. find all of them\n    return markdown.replace(/\\[\\[([^\\]]+)\\]\\]/g, function(allPattern, link) {\n\n      // inside of brekets link can be added as:\n      // - page name only [[Calls]], [[Call-Log]];\n      // - link title only [[Call Log]];\n      // - link title and page name [[Call Log|Call-Log]], [[Log|Call Log]].\n\n      // search for link title\n      let linkTitle = link.replace(/\\|([^\\|]+)/, \"\")\n\n      // search for page name\n      let pageName = link.replace(/([^\\|]+)\\|/, \"\")\n\n      if(!linkTitle){\n        linkTitle = link\n      }\n\n      if (!pageName){\n        pageName = link\n      }\n\n      // make sure page name has correct format\n      pageName = pageName.replace(/ /g, \"-\")\n\n      // convert [[<link title> | <page name>]] to [<link title>](<page name>)\n      link = `[${linkTitle}](${pageName})`\n      return link\n    })\n  }\n}\n\n\nmodule.exports = Markdown\n"]}