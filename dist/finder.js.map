{"version":3,"sources":["../src/finder.js"],"names":["dir","require","path","fs","util","logger","Promise","Finder","searchMarkdownFiles","wikiPath","resolve","reject","mdFiles","aliases","dirOpts","match","exclude","readFiles","err","content","filename","next","base","basename","substr","length","debug","format","Object","keys","files","searchForFile","search_path","file","some","f","p","join","statSync","isFile","e","module","exports"],"mappings":"AAAA,aAEA,GAAIA,KAAMC,QAAQ,UAAR,CAAV,CACIC,KAAOD,QAAQ,MAAR,CADX,CAEIE,GAAKF,QAAQ,UAAR,CAFT,CAGIG,KAAOH,QAAQ,MAAR,CAHX,CAIII,OAASJ,QAAQ,UAAR,CAJb,CAKIK,QAAUL,QAAQ,UAAR,CALd,CAOA;;GAGA,KAAMM,OAAO,CAEX;;;;;KAMA,MAAOC,oBAAP,CAA2BC,CAA3B,CAAqC,CAEnC,MAAO,IAAIH,QAAJ,CAAY,SAASI,CAAT,CAAkBC,CAAlB,CAA0B,CAE3C,GAAIC,GAAU,EAAd,CACIC,EAAU,EADd,CAEIC,EAAU,CAAEC,MAAO,KAAT,CAAgBC,QAAS,IAAzB,CAFd,CAIAhB,IAAIiB,SAAJ,CAAcR,CAAd,CAAwBK,CAAxB,CAAiC,SAAUI,CAAV,CAAeC,CAAf,CAAwBC,CAAxB,CAAkCC,CAAlC,CAAwC,CACrE,GAAI,CAACH,CAAL,CAAU,CACRN,EAAQQ,CAAR,EAAoBD,CADZ,CAER,GAAIG,GAAOpB,KAAKqB,QAAL,CAAcH,CAAd,CAAX,CACAP,EAAQS,EAAKE,MAAL,CAAY,CAAZ,CAAeF,EAAKG,MAAL,CAAc,CAA7B,CAAR,EAA2CL,CAC5C,CACDC,GACD,CAPH,CAQE,SAAUH,CAAV,CAAsB,OAChBA,EADgB,CAEXP,EAAOO,CAAP,CAFW,MAIpBb,OAAOqB,KAAP,CACEtB,KAAKuB,MAAL,CACE,8DADF,CAEEC,OAAOC,IAAP,CAAYjB,CAAZ,EAAqBa,MAFvB,CAGEG,OAAOC,IAAP,CAAYhB,CAAZ,EAAqBY,MAHvB,CADF,CAJoB,CAWpBf,EAAQ,CAACoB,MAAOlB,CAAR,CAAiBC,QAASA,CAA1B,CAAR,CAXoB,CAYrB,CApBH,CAqBD,CA3BM,CA4BR,CAED;;;;KAKA,MAAOkB,cAAP,CAAqBD,CAArB,CAA4BE,CAA5B,CAAyC,CACvC,GAAIC,GAAO,IAAX,CASA,MARAH,GAAMI,IAAN,CAAWC,GAAK,CACd,GAAIC,GAAIlC,KAAKmC,IAAL,CAAUL,CAAV,CAAuBG,CAAvB,CAAR,CACA,GAAI,CACF,MAAQhC,IAAGmC,QAAH,CAAYF,CAAZ,EAAeG,MAAf,KAA4BN,EAAOG,CAAnC,CACT,CAAC,MAAMI,CAAN,CAAS,CACT,QACD,CACF,CAPD,CAOG,IAPH,CAQA,CAAOP,CACR,CAxDU,CA2DbQ,OAAOC,OAAP,CAAiBnC,M","file":"finder.js","sourcesContent":["\"use strict\"\n\nvar dir = require('node-dir')\n  , path = require('path')\n  , fs = require('fs-extra')\n  , util = require('util')\n  , logger = require('./logger')\n  , Promise = require(\"bluebird\")\n\n/**\n * Finder class\n */\nclass Finder {\n\n  /**\n   * Search for md files\n   *\n   * @param {string} wikiPath Path to wiki directory\n   * @returns {Promise}\n   */\n  static searchMarkdownFiles(wikiPath) {\n\n    return new Promise(function(resolve, reject) {\n\n      var mdFiles = {},\n          aliases = {},\n          dirOpts = { match: /.md/, exclude: /^_/ }\n\n      dir.readFiles(wikiPath, dirOpts, function (err, content, filename, next) {\n          if (!err) {\n            mdFiles[filename] = content\n            var base = path.basename(filename)\n            aliases[base.substr(0, base.length - 3)] = filename\n          }\n          next()\n        },\n        function (err, files) {\n          if (err) {\n            return reject(err)\n          }\n          logger.debug(\n            util.format(\n              'Found %d markdown files and %d links pointing to them in TOC',\n              Object.keys(mdFiles).length,\n              Object.keys(aliases).length\n            )\n          )\n          resolve({files: mdFiles, aliases: aliases})\n        })\n    })\n  }\n\n  /**\n   * Search for a file among multiple directories, ordered by priority\n   *\n   * @returns {string|null}\n   */\n  static searchForFile(files, search_path) {\n    var file = null\n    files.some(f => {\n      var p = path.join(search_path, f)\n      try {\n        return (fs.statSync(p).isFile() && (file = p))\n      } catch(e) {\n        return false\n      }\n    }, this)\n    return file\n  }\n}\n\nmodule.exports = Finder\n"]}