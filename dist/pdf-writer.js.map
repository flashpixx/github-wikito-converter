{"version":3,"sources":["../src/pdf-writer.js"],"names":["wkhtmltopdf","require","Promise","helpers","fs","logger","BaseWriter","PdfWriter","getExtension","getPageBreaker","pageTitle","pageId","write","html","buildHeader","pages","converter","getPages","filename","getFilename","footer","getOption","pdfPageCount","self","debug","length","forEach","page","getPageIdFromFilenameOrLink","file","pdfPage","title","buildFooter","resolve","reject","options","toc","outline","marginLeft","marginRight","footerLine","footerSpacing","footerFontSize","pageOffset","footerLeft","footerRight","on","info","pipe","createWriteStream","bind","htmlHeader","getCssTags","getExtraCss","getJsTags","getLogoImage","getToc","getHtml","createImageLogoTag","path","module","exports"],"mappings":"AAAA,aAEA,GAAIA,aAAcC,QAAQ,aAAR,CAAlB,CACIC,QAAUD,QAAQ,UAAR,CADd,CAEIE,QAAUF,QAAQ,WAAR,CAFd,CAGIG,GAAKH,QAAQ,UAAR,CAHT,CAIII,OAASJ,QAAQ,UAAR,CAJb,CAKIK,WAAaL,QAAQ,eAAR,CALjB,CAOA,KAAMM,UAAN,QAAwBD,WAAW,CAEjCE,cAAe,CACb,MAAO,KACR,CAEDC,eAAeC,CAAf,CAA0BC,CAA1B,CAAkC,CAChC,MAAQ,WAAUA,CAAO,mDAAkDD,CAAU,OACtF,CAEDE,OAAQ,CAEN,GAAIC,GAAO,KAAKC,WAAL,EAAX,CACIC,EAAQ,KAAKC,SAAL,CAAeC,QAAf,EADZ,CAEIC,EAAW,KAAKC,WAAL,EAFf,CAGIC,EAAS,KAAKJ,SAAL,CAAeK,SAAf,CAAyB,QAAzB,CAHb,CAIIC,EAAe,KAAKN,SAAL,CAAeK,SAAf,CAAyB,cAAzB,CAJnB,CAKIE,EAAO,IALX,CAiBA,MAVAlB,QAAOmB,KAAP,CAAa,sCAAb,CAAqDT,EAAMU,MAA3D,CAUA,CARAV,EAAMW,OAAN,CAAcC,GAAQ,IAChBhB,GAASR,QAAQyB,2BAAR,CAAoCD,EAAKE,IAAzC,CADO,CAEhBC,EAAU,KAAKrB,cAAL,CAAoBkB,EAAKI,KAAzB,CAAgCpB,CAAhC,EAA0CgB,EAAKd,IAFzC,CAGpBA,GAAQiB,CACT,CAJD,CAIG,IAJH,CAQA,CAFAjB,GAAQ,KAAKmB,WAAL,EAER,CAAO,GAAI9B,QAAJ,CAAY,SAAU+B,CAAV,CAAmBC,CAAnB,CAA2B,CAC5C,GAAIC,GAAU,CACZC,MADY,CACCC,UADD,CAEZC,WAAY,EAFA,CAEIC,YAAa,EAFjB,CAGZC,aAHY,CAGOC,cAAe,GAHtB,CAIZC,eAAgB,EAJJ,CAIQC,WAAY,CAJpB,CAAd,CAOGvB,CARyC,GAS1Ce,EAAQS,UAAR,CAAqBxB,CATqB,EAYzCE,CAZyC,GAa1Ca,EAAQU,WAAR,CAAsB,iBAboB,EAgB5C7C,YAAYa,CAAZ,CAAkBsB,CAAlB,EACGW,EADH,CACM,KADN,CACa,UAAW,CACpBzC,OAAO0C,IAAP,CAAYxB,EAAKf,YAAL,GAAsB,mBAAlC,CAAuDU,CAAvD,CADoB,CAEpBe,EAAQf,CAAR,CACD,CAJH,EAKG4B,EALH,CAKM,OALN,CAKeZ,CALf,EAMGc,IANH,CAMQ5C,GAAG6C,iBAAH,CAAqB/B,CAArB,CANR,CAOD,CAvBkB,CAuBjBgC,IAvBiB,CAuBZ,IAvBY,CAAZ,CAwBR,CAEDpC,aAAc,CAEZ,GAAIqC,GAAc;;;;;;aAMT,KAAKnC,SAAL,CAAeK,SAAf,CAAyB,OAAzB,CAAkC;MACzC,KAAK+B,UAAL,EAAkB;aACX,KAAKC,WAAL,EAAmB;MAC1B,KAAKC,SAAL,EAAiB;;;;;;MAMjB,KAAKC,YAAL,EAAoB;;;WAGf,KAAKvC,SAAL,CAAeK,SAAf,CAAyB,OAAzB,CAAkC;;;;;;MAMvC,KAAKL,SAAL,CAAewC,MAAf,GAAwBC,OAAxB,EAAkC;;CAxBpC,CA2BA,MAAON,EACR,CAGDnB,aAAc,CACE;;QADF,CAKZ,4BACD,CACD0B,mBAAmBC,CAAnB,CAAyB,CACnB,MAAQ,8BAA6BA,CAAK,KAC/C,CAjGgC,CAoGnCC,OAAOC,OAAP,CAAiBtD,S","file":"pdf-writer.js","sourcesContent":["\"use strict\"\n\nvar wkhtmltopdf = require('wkhtmltopdf')\n  , Promise = require(\"bluebird\")\n  , helpers = require('./helpers')\n  , fs = require('fs-extra')\n  , logger = require('./logger')\n  , BaseWriter = require('./base-writer')\n\nclass PdfWriter extends BaseWriter {\n\n  getExtension() {\n    return 'pdf'\n  }\n\n  getPageBreaker(pageTitle, pageId) {\n    return `<h1 id=\"${pageId}\" style=\"page-break-before: always !important;\">${pageTitle}</h1>`\n  }\n\n  write() {\n\n    var html = this.buildHeader(),\n        pages = this.converter.getPages(),\n        filename = this.getFilename(),\n        footer = this.converter.getOption('footer'),\n        pdfPageCount = this.converter.getOption('pdfPageCount'),\n        self = this\n\n    logger.debug('Generating pdf: %d pages to generate', pages.length)\n\n    pages.forEach(page => {\n      var pageId = helpers.getPageIdFromFilenameOrLink(page.file)\n      var pdfPage = this.getPageBreaker(page.title, pageId) + page.html\n      html += pdfPage\n    }, this)\n\n    html += this.buildFooter()\n\n    return new Promise(function (resolve, reject) {\n      let options = {\n        toc : false, outline: true,\n        marginLeft: 10, marginRight: 10,\n        footerLine: false, footerSpacing: 2.5,\n        footerFontSize: 10, pageOffset: 0\n      }\n\n      if(footer){\n        options.footerLeft = footer\n      }\n\n      if(pdfPageCount){\n        options.footerRight = \"[page]/[toPage]\"\n      }\n\n      wkhtmltopdf(html, options)\n        .on('end', function() {\n          logger.info(self.getExtension() + ' file written: %s', filename)\n          resolve(filename)\n        })\n        .on('error', reject)\n        .pipe(fs.createWriteStream(filename))\n    }.bind(this))\n  }\n\n  buildHeader() {\n\n    var htmlHeader = `<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <title>${this.converter.getOption('title')}</title>\n    ${this.getCssTags()}\n    <style>${this.getExtraCss()}</style>\n    ${this.getJsTags()}\n  </head>\n  <body id=\"page-top\" class=\"pdf-doc\">\n\n    <!-- Cover page -->\n\n    ${this.getLogoImage()}\n\n    <div class='covertitle'>\n      <b>${this.converter.getOption('title')}</b>\n    </div>\n\n    <!-- Cover page -->\n    <div class='nav-container'>\n      <h1 class='toc'></h1>\n    ${this.converter.getToc().getHtml()}\n    </div>\n`\n    return htmlHeader\n  }\n\n\n  buildFooter() {\n    var footer = `\n  </body>\n</html>`\n\n    return footer\n  }\n  createImageLogoTag(path) {\n        return `<img class=\"coverimg\" src=\"${path}\"/>`\n  }\n}\n\nmodule.exports = PdfWriter\n"]}