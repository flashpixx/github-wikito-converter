{"version":3,"sources":["../src/base-writer.js"],"names":["fs","require","path","util","logger","Promise","datauri","sync","BaseWriter","constructor","converter","write","filename","html","self","resolve","reject","writeFile","err","info","getExtension","Error","getFilename","join","getOption","getCssTags","getAssetsTags","getCssFiles","getJsTags","getJsFiles","getExtraCss","tocLevel","repeat","files","type","map","file","getAssetSingleTag","tplIn","tplOut","format","basename","readFileSync","encoding","createImageLogoTag","getLogoImage","logoPath","getLogoImgPath","logoOption","module","exports"],"mappings":"AAAA,aAEA,GAAIA,IAAKC,QAAQ,UAAR,CAAT,CACIC,KAAOD,QAAQ,MAAR,CADX,CAEIE,KAAOF,QAAQ,MAAR,CAFX,CAGIG,OAASH,QAAQ,UAAR,CAHb,CAIII,QAAUJ,QAAQ,UAAR,CAJd,CAKIK,QAAUL,QAAQ,SAAR,EAAmBM,IALjC,CAOA,KAAMC,WAAW,CAEf;;;KAIAC,YAAYC,CAAZ,CAAuB,CACrB,KAAKA,SAAL,CAAiBA,CAClB,CAEDC,MAAMC,CAAN,CAAgBC,CAAhB,CAAsB,CACpB,GAAIC,GAAO,IAAX,CACA,MAAO,IAAIT,QAAJ,CAAY,SAASU,CAAT,CAAkBC,CAAlB,CAA0B,CAC3ChB,GAAGiB,SAAH,CAAaL,CAAb,CAAuBC,CAAvB,CAA6B,SAASK,CAAT,CAAc,OACrCA,EADqC,CAEhCF,EAAOE,CAAP,CAFgC,MAIzCd,OAAOe,IAAP,CAAYL,EAAKM,YAAL,GAAsB,mBAAlC,CAAuDR,CAAvD,CAJyC,CAKzCG,EAAQH,CAAR,CALyC,CAM1C,CAND,CAOD,CARM,CASR,CAEDQ,cAAe,CACb,KAAM,IAAIC,MAAJ,CAAU,kDAAV,CACP,CAEDC,aAAc,CACZ,MAAOpB,MAAKqB,IAAL,CAAU,KAAKb,SAAL,CAAec,SAAf,CAAyB,QAAzB,CAAV,CAA8C,KAAKd,SAAL,CAAec,SAAf,CAAyB,UAAzB,EAAuC,GAAvC,CAA6C,KAAKJ,YAAL,EAA3F,CACR,CAEDK,YAAa,CACX,MAAO,MAAKC,aAAL,CAAmB,KAAKhB,SAAL,CAAeiB,WAAf,EAAnB,CAAiD,KAAjD,EAAwDJ,IAAxD,CAA6D,IAA7D,CACR,CAEDK,WAAY,CACV,MAAO,MAAKF,aAAL,CAAmB,KAAKhB,SAAL,CAAemB,UAAf,EAAnB,CAAgD,IAAhD,EAAsDN,IAAtD,CAA2D,IAA3D,CACR,CAEDO,aAAc,CACZ,GAAIC,GAAW,KAAKrB,SAAL,CAAec,SAAf,CAAyB,UAAzB,CAAf,CAEA,MAAO,aAAe,eAAgBQ,MAAhB,CAAuBD,CAAvB,CAAf,CAAkD,kBAC1D,CAEDL,cAAcO,CAAd,CAAqBC,CAArB,CAA2B,CACzB,MAAOD,GAAME,GAAN,CAAU,SAASC,CAAT,CAAe,CAC9B,MAAO,MAAKC,iBAAL,CAAuBD,CAAvB,CAA6BF,CAA7B,CACR,CAFM,CAEJ,IAFI,CAGR,CAEDG,kBAAkBD,CAAlB,CAAwBF,CAAxB,CAA8B,CAC5B,GAAII,EAAJ,CAAWC,CAAX,CAUA,MARa,IAAT,IAQJ,EAPED,EAAQ,qBAOV,CANEC,EAAS,8CAMX,GAJED,EAAQ,mBAIV,CAHEC,EAAS,qCAGX,EAAO,KAAK7B,SAAL,CAAec,SAAf,CAAyB,qBAAzB,EACLrB,KAAKqC,MAAL,CAAYD,CAAZ,CAAoBrC,KAAKuC,QAAL,CAAcL,CAAd,CAApB,CADK,CAELjC,KAAKqC,MAAL,CAAYF,CAAZ,CAAmBtC,GAAG0C,YAAH,CAAgBN,CAAhB,CAAsB,CAACO,SAAW,MAAZ,CAAtB,CAAnB,CACH,CAEDC,oBAAyB,CACvB,KAAM,IAAIvB,MAAJ,CAAU,4DAAV,CACP,CAEDwB,cAAc,CACZ,GAAIC,GAAW,KAAKC,cAAL,EAAf,CACA,MAAOD,GAAW,KAAKF,kBAAL,CAAwBE,CAAxB,CAAX,CAA+C,EACvD,CAEDC,gBAAiB,CACf,GAAIC,GAAa,KAAKtC,SAAL,CAAec,SAAf,CAAyB,WAAzB,CAAjB,CACA,MAAOwB,GAAa1C,QAAQJ,KAAKa,OAAL,CAAaiC,CAAb,CAAR,CAAb,CAAiDA,CACzD,CA/Ec,CAmFjBC,OAAOC,OAAP,CAAiB1C,U","file":"base-writer.js","sourcesContent":["\"use strict\"\n\nvar fs = require('fs-extra')\n  , path = require('path')\n  , util = require('util')\n  , logger = require('./logger')\n  , Promise = require(\"bluebird\")\n  , datauri = require('datauri').sync\n\nclass BaseWriter {\n\n  /**\n   *\n   * @param {GWC} GWC instance\n   */\n  constructor(converter) {\n    this.converter = converter\n  }\n\n  write(filename, html) {\n    var self = this\n    return new Promise(function(resolve, reject) {\n      fs.writeFile(filename, html, function(err) {\n        if (err) {\n          return reject(err)\n        }\n        logger.info(self.getExtension() + ' file written: %s', filename)\n        resolve(filename)\n      })\n    })\n  }\n\n  getExtension() {\n    throw new Error('You must define an getExtension() in your writer')\n  }\n\n  getFilename() {\n    return path.join(this.converter.getOption('output'), this.converter.getOption('filename') + '.' + this.getExtension())\n  }\n\n  getCssTags() {\n    return this.getAssetsTags(this.converter.getCssFiles(), 'css').join('\\n')\n  }\n\n  getJsTags() {\n    return this.getAssetsTags(this.converter.getJsFiles(), 'js').join('\\n')\n  }\n\n  getExtraCss() {\n    var tocLevel = this.converter.getOption('tocLevel'),\n      tocLevelBaseCss = '> .nav > li '\n    return '.nav > li ' + tocLevelBaseCss.repeat(tocLevel) + '{display: none;}'\n  }\n\n  getAssetsTags(files, type) {\n    return files.map(function(file) {\n      return this.getAssetSingleTag(file, type)\n    }, this)\n  }\n\n  getAssetSingleTag(file, type) {\n    var tplIn, tplOut\n\n    if (type === 'js') {\n      tplIn = '<script>%s</script>'\n      tplOut = '<script src=\"%s\" type=\"javascript\"></script>'\n    } else {\n      tplIn = '<style>%s</style>'\n      tplOut = '<link href=\"%s\" rel=\"stylesheet\" />'\n    }\n\n    return this.converter.getOption('disableInlineAssets') ?\n      util.format(tplOut, path.basename(file)):\n      util.format(tplIn, fs.readFileSync(file, {encoding : 'utf8'}))\n  }\n\n  createImageLogoTag(path) {\n    throw new Error('You must define an createImageLogoTag(path) in your writer')\n  }\n\n  getLogoImage(){\n    let logoPath = this.getLogoImgPath();\n    return logoPath ? this.createImageLogoTag(logoPath) : ''\n  }\n\n  getLogoImgPath() {\n    let logoOption = this.converter.getOption('logoImage')\n    return logoOption ? datauri(path.resolve(logoOption)) : logoOption\n  }\n\n}\n\nmodule.exports = BaseWriter\n"]}